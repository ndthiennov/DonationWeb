// <auto-generated />
using System;
using DonationAppDemo.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DonationAppDemo.Migrations
{
    [DbContext(typeof(DonationDbContext))]
    [Migration("20241112173511__9_AddForeignKey")]
    partial class _9_AddForeignKey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DonationAppDemo.Models.Account", b =>
                {
                    b.Property<string>("PhoneNum")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Disabled")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PhoneNum");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Admin_Name");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverSrcPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Disabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganiserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusCampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TargetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganiserId");

                    b.HasIndex("StatusCampaignId");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("DonationAppDemo.Models.CampaignParticipant", b =>
                {
                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.HasKey("CampaignId", "DonorId");

                    b.HasIndex("DonorId");

                    b.ToTable("CampaignParticipant");
                });

            modelBuilder.Entity("DonationAppDemo.Models.CampaignStatistics", b =>
                {
                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalDonationAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalExpendedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalTransferredAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CampaignId");

                    b.ToTable("CampaignStatistics");
                });

            modelBuilder.Entity("DonationAppDemo.Models.CommentPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("CommentPost");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DonationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DonorId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("DonorId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Donation");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvaSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvaSrcPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Donor_Name");

                    b.ToTable("Donor");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrganiserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("OrganiserId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("DonationAppDemo.Models.ImageCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("ImageSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSrcPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusCampaignId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StatusCampaignId");

                    b.ToTable("ImageCampaign");
                });

            modelBuilder.Entity("DonationAppDemo.Models.ImageCommentPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CommentPostId")
                        .HasColumnType("int");

                    b.Property<string>("ImageSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSrcPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentPostId");

                    b.ToTable("ImageCommentPost");
                });

            modelBuilder.Entity("DonationAppDemo.Models.ImagePost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSrcPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("ImagePost");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool?>("Marked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("int");

                    b.Property<string>("ToUserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Organiser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AcceptedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvaSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvaSrcPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationSrcPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Organiser_Name");

                    b.ToTable("Organiser");
                });

            modelBuilder.Entity("DonationAppDemo.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("ContentPost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Disabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("DonationAppDemo.Models.RateCampaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CampaignId", "DonorId");

                    b.HasIndex("DonorId");

                    b.ToTable("RateCampaign");
                });

            modelBuilder.Entity("DonationAppDemo.Models.StatusCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusCampaign");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Transference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CampaignId");

                    b.ToTable("Transference");
                });

            modelBuilder.Entity("DonationAppDemo.Models.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FcmToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Admin", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Account", "Account")
                        .WithMany("Admins")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Campaign", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Organiser", "Organiser")
                        .WithMany("Campaigns")
                        .HasForeignKey("OrganiserId");

                    b.HasOne("DonationAppDemo.Models.StatusCampaign", "StatusCampaign")
                        .WithMany("Campaigns")
                        .HasForeignKey("StatusCampaignId");

                    b.Navigation("Organiser");

                    b.Navigation("StatusCampaign");
                });

            modelBuilder.Entity("DonationAppDemo.Models.CampaignParticipant", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Campaign", "Campaign")
                        .WithMany("CampaignParticipants")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonationAppDemo.Models.Donor", "Donor")
                        .WithMany("CampaignParticipants")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("DonationAppDemo.Models.CommentPost", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Post", "Post")
                        .WithMany("CommentPosts")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Donation", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Campaign", "Campaign")
                        .WithMany("Donations")
                        .HasForeignKey("CampaignId");

                    b.HasOne("DonationAppDemo.Models.Donor", "Donor")
                        .WithMany("Donations")
                        .HasForeignKey("DonorId");

                    b.HasOne("DonationAppDemo.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Donations")
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("Campaign");

                    b.Navigation("Donor");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Donor", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Account", "Account")
                        .WithMany("Donors")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Expense", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Campaign", "Campaign")
                        .WithMany("Expenses")
                        .HasForeignKey("CampaignId");

                    b.HasOne("DonationAppDemo.Models.Organiser", "Organiser")
                        .WithMany("Expenses")
                        .HasForeignKey("OrganiserId");

                    b.Navigation("Campaign");

                    b.Navigation("Organiser");
                });

            modelBuilder.Entity("DonationAppDemo.Models.ImageCampaign", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Campaign", "Campaign")
                        .WithMany("ImageCampaigns")
                        .HasForeignKey("CampaignId");

                    b.HasOne("DonationAppDemo.Models.StatusCampaign", "StatusCampaign")
                        .WithMany("ImageCampaigns")
                        .HasForeignKey("StatusCampaignId");

                    b.Navigation("Campaign");

                    b.Navigation("StatusCampaign");
                });

            modelBuilder.Entity("DonationAppDemo.Models.ImageCommentPost", b =>
                {
                    b.HasOne("DonationAppDemo.Models.CommentPost", "CommentPost")
                        .WithMany("ImageCommentPosts")
                        .HasForeignKey("CommentPostId");

                    b.Navigation("CommentPost");
                });

            modelBuilder.Entity("DonationAppDemo.Models.ImagePost", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Post", "Post")
                        .WithMany("ImagePosts")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Organiser", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Account", "Account")
                        .WithMany("Organisers")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Post", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Admin", "Admin")
                        .WithMany("Posts")
                        .HasForeignKey("AdminId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("DonationAppDemo.Models.RateCampaign", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Campaign", "Campaign")
                        .WithMany("RateCampaigns")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonationAppDemo.Models.Donor", "Donor")
                        .WithMany("RateCampaigns")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Transference", b =>
                {
                    b.HasOne("DonationAppDemo.Models.Admin", "Admin")
                        .WithMany("Transferences")
                        .HasForeignKey("AdminId");

                    b.HasOne("DonationAppDemo.Models.Campaign", "Campaign")
                        .WithMany("Transferences")
                        .HasForeignKey("CampaignId");

                    b.Navigation("Admin");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Account", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Donors");

                    b.Navigation("Organisers");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Admin", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Transferences");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Campaign", b =>
                {
                    b.Navigation("CampaignParticipants");

                    b.Navigation("Donations");

                    b.Navigation("Expenses");

                    b.Navigation("ImageCampaigns");

                    b.Navigation("RateCampaigns");

                    b.Navigation("Transferences");
                });

            modelBuilder.Entity("DonationAppDemo.Models.CommentPost", b =>
                {
                    b.Navigation("ImageCommentPosts");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Donor", b =>
                {
                    b.Navigation("CampaignParticipants");

                    b.Navigation("Donations");

                    b.Navigation("RateCampaigns");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Organiser", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("DonationAppDemo.Models.PaymentMethod", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("DonationAppDemo.Models.Post", b =>
                {
                    b.Navigation("CommentPosts");

                    b.Navigation("ImagePosts");
                });

            modelBuilder.Entity("DonationAppDemo.Models.StatusCampaign", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("ImageCampaigns");
                });
#pragma warning restore 612, 618
        }
    }
}
